/* * To change this template, choose Tools | Templates * and open the template in the editor. */package PersianCalander.components.Calendar;import static PersianCalander.MainCalendar.stage2;import static PersianCalander.MainCalendar.tf;import PersianCalander.components.daycard.*;import static ir.ui.ac.cg.zaeri.persiancalendar.DateConvert.*;import java.io.IOException;import java.text.DecimalFormatSymbols;import java.text.NumberFormat;import java.time.LocalDate;import java.util.HashMap;import java.util.logging.Level;import java.util.logging.Logger;import javafx.fxml.FXMLLoader;import javafx.scene.Group;import javafx.scene.Parent;import javafx.scene.control.*;import javafx.scene.layout.*;import java.time.chrono.*;import java.util.Locale;import javafx.beans.value.ObservableValue;import javafx.scene.Scene;import javafx.stage.Stage;import javafx.stage.StageStyle;/** * * @author Emad47 */public class Calendar extends StackPane {    Locale arabicLocale = new Locale.Builder().setLanguageTag("ar-SA-u-nu-arab").build();    DecimalFormatSymbols dfs = DecimalFormatSymbols.getInstance(arabicLocale);    NumberFormat numberFormat = NumberFormat.getNumberInstance(arabicLocale);    public static String date;    public static CheckBox chk;    public static Boolean sel = false;    public static HijrahDate hdf = HijrahChronology.INSTANCE.date(LocalDate.of(getyear(todaym()), getmonth(todaym()), getday(todaym())));    public static HijrahDate hdl = HijrahChronology.INSTANCE.date(LocalDate.of(getyear(todaym()), getmonth(todaym()), getday(todaym())));    public static HijrahDate hdd;    public static HijrahDate hde;    DayCard selected = null;    DayCard cards[] = new DayCard[maxDayOfMonth(getmonth(today()), getyear(today()))];    Button nxtm, prvm, nxty, prvy, btntd, save;    public static Label lblfm, lblmm, lblfy, lblmy, lblgm, lblgy, lbleve, lbltdf, lbltdm, lbltdg;    int passed;    String image;    Group gc = new Group();    Parent root = null;    Parent root2 = null;    int month = 4;    int start;    int i;    public VBox mvb;    public static int getmm[] = h2m(1, getmonth(today()), getyear(today()));    public static int getmm2[] = h2m(maxDayOfMonth(getmonth(today()), getyear(today())), getmonth(today()), getyear(today()));    StackPane[] stackDays = new StackPane[37];    public static int fmindex = getmonth(today());    public static int mmindex = getmm[1];    public static int mmindex2 = getmm2[1];    public static int fyindex = getyear(today());    public static int myindex = getyear(todaym());    public static int gyindex = hdf.get(java.time.temporal.ChronoField.YEAR);    public static int gmindex = hdf.get(java.time.temporal.ChronoField.MONTH_OF_YEAR);    public static int fdaym[];    public static int fdayg;    public TextArea ta = new TextArea();    public TextArea tas = new TextArea();    public static HashMap<String, String> map = new HashMap();    public HashMap<String, Boolean> isholly = new HashMap();    public HashMap<String, Boolean> ishollyg = new HashMap();    public HashMap<String, String> eventdf = new HashMap();    public HashMap<String, String> eventdg = new HashMap();    public HashMap<String, String> note = new HashMap();//  java  -xmx200m    public Calendar() {        start = hdayofweek(fyindex + "/" + fmindex + "/" + 1);        mapping();        try {            root = FXMLLoader.load(Calendar.class.getResource("/PersianCalander/FXML/Cal.fxml"));            loadcomps();            addDays();            Actions();        } catch (IOException ex) {            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);        }        getChildren().add(root);//        System.gc();    }    private void loadcomps() {                for (i = 0; i < 37; i++) {            stackDays[i] = (StackPane) root.lookup("#d" + (i + 1));        }        nxtm = (Button) root.lookup("#btnnxtm");        prvm = (Button) root.lookup("#btnprevm");        nxty = (Button) root.lookup("#btnnxty");        prvy = (Button) root.lookup("#btnprevy");        btntd = (Button) root.lookup("#btntoday");        lblfm = (Label) root.lookup("#lblfm");        lblmm = (Label) root.lookup("#lblmm");        lblfy = (Label) root.lookup("#lblfy");        lblmy = (Label) root.lookup("#lblmy");        lbltdf = (Label) root.lookup("#lbltdf");        lbltdm = (Label) root.lookup("#lbltdm");        lbltdg = (Label) root.lookup("#lbltdg");        lbleve = (Label) root.lookup("#lblevent");        lblgm = (Label) root.lookup("#lblgm");        lblgy = (Label) root.lookup("#lblgy");        tas = (TextArea) root.lookup("#snote");        mvb = (VBox) root.lookup("#mainvb");        chk = (CheckBox) root.lookup("#check");    }    private void Actions() {        nxtm.setOnAction(e -> {            fmindex++;            mmindex++;            mmindex2++;            gmindex++;            if (fmindex >= 13) {                fmindex = 1;                fyindex++;            }            if (mmindex >= 13) {                mmindex = 1;                myindex++;            }            if (mmindex2 >= 13) {                mmindex2 = 1;            }            if (gmindex >= 13) {                gmindex = 1;                gyindex++;            }            updateUI();            addDays();        });        prvm.setOnAction(e -> {            fmindex--;            mmindex--;            mmindex2--;            gmindex--;            if (fmindex <= 0) {                fmindex = 12;                fyindex--;            }            if (mmindex <= 0) {                mmindex = 12;                myindex--;            }            if (mmindex2 <= 0) {                mmindex2 = 12;            }            if (gmindex <= 0) {                gmindex = 12;                gyindex--;            }            updateUI();            addDays();        });        nxty.setOnAction(e -> {            fyindex++;            myindex++;            gyindex++;            addDays();            updateUI();        });        prvy.setOnAction(e -> {            fyindex--;            myindex--;            gyindex--;            addDays();            updateUI();        });        btntd.setOnAction(e -> {            hdd = HijrahChronology.INSTANCE.date(LocalDate.of(getyear(todaym()), getmonth(todaym()), getday(todaym())));            fmindex = getmonth(today());            mmindex = getmonth(todaym());            mmindex2 = getmm2[1];            fyindex = getyear(today());            myindex = getyear(todaym());            gmindex = hdd.get(java.time.temporal.ChronoField.MONTH_OF_YEAR);            gyindex = hdd.get(java.time.temporal.ChronoField.YEAR);            updateUI();            addDays();            lbltdf.setText(todayFull());            lbltdm.setText(todayFullm());            lbltdg.setText(dayFullg(gyindex + "/" + gmindex + "/" + hdd.get(java.time.temporal.ChronoField.DAY_OF_MONTH)));            lblgm.setText(gmonth2str(hdd.get(java.time.temporal.ChronoField.MONTH_OF_YEAR)));            lbleve.setText(eventdf.get(getmonth(today()) + "/" + getday(today())));            lblmm.setText(mmonth2str(getmonth(todaym())));            tas.setText(note.get("DayCard[id=" + today() + "]"));//            System.gc();        });    }    public final void mapping() {        map.put("1", "March - April");        map.put("2", "April - May");        map.put("3", "May - June");        map.put("4", "June - July");        map.put("5", "July - August");        map.put("6", "August - September");        map.put("7", "September - October");        map.put("8", "October - November");        map.put("9", "November - December");        map.put("10", "December - January");        map.put("11", "January - February");        map.put("12", "February - March");/////////////////        Farvardin events       ////////////////                eventdf.put("1/1", "جشن سال نو");        isholly.put("1/1", true);        eventdf.put("1/2", "عید نوروز");        isholly.put("1/2", true);        eventdf.put("1/3", "عید نوروز");        isholly.put("1/3", true);        eventdf.put("1/4", "عید نوروز");        isholly.put("1/4", true);        eventdf.put("1/12", "روز جمهوری اسلامی ایران");        isholly.put("1/12", true);        eventdf.put("1/13", "روز طبیعت");        isholly.put("1/13", true);        eventdf.put("1/25", "روز بزرگداشت عطار نیشابوری");        isholly.put("1/25", false);        eventdf.put("1/29", "روز ارتش جمهوری اسلامی ایران");        isholly.put("1/29", false);        //////////////////// Ordibehesht events //////////////////        eventdf.put("2/1", "روز بزرگداشت سعدی");        isholly.put("2/1", false);        eventdf.put("2/3", "روز ملی کارآفرینی " + "\n" + "روز بزرگداشت شیخ بهایی");        isholly.put("2/3", false);        eventdf.put("2/9", "روز شوراها");        isholly.put("2/9", false);        eventdf.put("2/10", "روز ملی خلیج فارس");        isholly.put("2/10", false);        eventdf.put("2/12", "شهادت استاد مطهری" + "\n" + "روز معلم");        isholly.put("2/12", false);        eventdf.put("2/15", "روز بزرگداشت شیخ صدوق");        isholly.put("2/15", false);        eventdf.put("2/25", "روز بزرگداشت فردوسی");        isholly.put("2/25", false);        eventdf.put("2/27", "روز ارتباطات و روابط عمومی");        isholly.put("2/27", false);        eventdf.put("2/28", "روز بزرگداشت حکیم عمر خیام");        isholly.put("2/28", false);        ////////////// khordad events ///////////////////////////        eventdf.put("3/1", "روز بزرگداشت ملاصدرا");        isholly.put("3/1", false);        eventdf.put("3/3", "سالروز آزادسازی خرمشهر");        isholly.put("3/3", false);        eventdf.put("3/14", "رحلت حضرت امام خمینی");        isholly.put("3/14", true);        eventdf.put("3/15", "قیام پانزده خرداد");        isholly.put("3/15", true);        eventdf.put("3/25", "روز ملی گل و گیاه");        isholly.put("3/25", false);        eventdf.put("3/27", "روز جهاد کشاورزی");        isholly.put("3/27", false);        eventdf.put("3/29", "درگذشت دکتر علی شریعتی");        isholly.put("3/29", false);        eventdf.put("3/31", "شهادت دکتر مصطفی چمران");        isholly.put("3/31", false);        ////////////////// tir events //////////////////////        eventdf.put("4/7", "شهادت آیت الله دکتر بهشتی");        isholly.put("4/7", false);        eventdf.put("4/10", "روز صنعت و معدن");        isholly.put("4/10", false);        eventdf.put("4/25", "روز بهزیستی و تامین اجتماعی");        isholly.put("4/25", false);        /////////////////// mordad events//////////////////////        eventdf.put("5/8", "روز بزرگداشت سهروردی");        isholly.put("5/8", false);        eventdf.put("5/14", "صدور فرمان مشروطه");        isholly.put("5/14", false);        eventdf.put("5/17", "روز خبرنگار");        isholly.put("5/17", false);        eventdf.put("5/28", "سالروز کودتای بیست و هشت مرداد");        isholly.put("5/28", false);        ////////////////// shahrivar events //////////////////////        eventdf.put("6/1", "روز بزرگداشت بوعلی سینا و روز پزشک");        isholly.put("6/1", false);        eventdf.put("6/5", "روز داروساز");        isholly.put("6/5", false);        eventdf.put("6/13", "روز بزرگداشت ابوریحان بیرونی");        isholly.put("6/13", false);        eventdf.put("6/17", "قیام هفده شهریور");        isholly.put("6/17", false);        eventdf.put("6/19", "وفات آیت الله طالقانی");        isholly.put("6/19", false);        eventdf.put("6/27", "روز بزرگداشت استاد شهریار");        isholly.put("6/27", false);        eventdf.put("6/30", "روز گفتگوی تمدن ها");        isholly.put("6/30", false);        eventdf.put("6/31", "آغاز هفته دفاع مقدس");        isholly.put("6/31", false);        /////////////////// mehr events /////////////////        eventdf.put("7/8", "روزبزرگداشت مولوی");        isholly.put("7/8", false);        eventdf.put("7/13", "روز نیروی انتظامی");        isholly.put("7/13", false);        eventdf.put("7/20", "روز بزرگداشت حافظ");        isholly.put("7/20", false);        ////////////////////// aban events ///////////////        eventdf.put("8/1", "روز امار و برنامه ریزی");        isholly.put("8/1", false);        eventdf.put("8/8", "روز نوجوان");        isholly.put("8/8", false);        eventdf.put("8/13", "روز دانش آموز");        isholly.put("8/13", false);        eventdf.put("8/24", "روز کتاب و کتاب خوانی");        isholly.put("8/24", false);        ////////////////////// azar events ///////////////        eventdf.put("9/5", "روز بسیج مستضعفان");        isholly.put("9/5", false);        eventdf.put("9/7", "روز نیرو دریایی");        isholly.put("9/7", false);        eventdf.put("9/10", "روز مجلس");        isholly.put("9/10", false);        eventdf.put("9/16", "روز دانشجو");        isholly.put("9/16", false);        eventdf.put("9/30", "جشن شب یلدا");        isholly.put("9/30", false);        ////////////////// dey events //////////////        eventdf.put("10/5", "روز ملی ایمنی برابر زلزله");        isholly.put("10/5", false);        ////////////////// bahman events //////////        eventdf.put("11/1", "زادروز فردوسی");        isholly.put("11/1", false);        eventdf.put("11/12", "بازگشت امام خمینی به ایران");        isholly.put("11/12", false);        eventdf.put("11/22", "پیروزی انقلاب اسلامی");        isholly.put("11/22", true);        ////////////////// esfand events ///////////        eventdf.put("12/5", "روز بزرگداشت خواجه نصیرالدین طوسی و روز مهندس");        isholly.put("12/5", false);        eventdf.put("12/14", "روز احسان و نیکوکاری");        isholly.put("12/14", false);        eventdf.put("12/15", "روز درختکاری");        isholly.put("12/15", false);        eventdf.put("12/29", "روز ملی شدن صنعت نفت ایران");        isholly.put("12/29", true);        //////////////////// moharam //////////////////////        eventdg.put("1/9", "تاسوعای حسینی");        ishollyg.put("1/9", true);        eventdg.put("1/10", "عاشورای حسینی");        ishollyg.put("1/10", true);        eventdg.put("1/12", "شهادت امام زین العابدین علیه السلام");        ishollyg.put("1/12", false);        //////////////// safar ///////////////////        eventdg.put("2/3", "ولادت امام محمد باقر علیه السلام");        ishollyg.put("2/3", false);        eventdg.put("2/7", "ولادت امام موسی کاظم علیه السلام");        ishollyg.put("2/7", false);        eventdg.put("2/20", "اربعین حسینی");        ishollyg.put("2/20", true);        eventdg.put("2/28", "رحلت رسول اکرم ، شهادت امام حسن مجتبی علیه السلام");        ishollyg.put("2/28", true);        eventdg.put("2/30", "شهادت امام رضا علیه السلام");        ishollyg.put("2/30", true);        ///////////////////// rabi 1 //////////////////        eventdg.put("3/8", "شهادت امام حسن عسکری علیه السلام");        ishollyg.put("3/8", false);        eventdg.put("3/9", "اغاز امامت امام زمان عج");        ishollyg.put("3/9", false);        eventdg.put("3/17", "میلاد رسول اکرم و امام جعفر صادق علیه السلام");        ishollyg.put("3/17", true);        //////////////////// rabi 2 //////////////////        eventdg.put("4/8", "ولادت امام حسن عسکری علیه السلام");        ishollyg.put("4/8", false);        eventdg.put("4/10", "وفات حضرت معصومه سلام الله علیها");        ishollyg.put("4/10", false);        /////////// jamadi 1 //////////////        eventdg.put("5/5", "ولادت حضرت زینب سلام الله علیها و روز پرستار");        ishollyg.put("5/5", false);        /////////// jamadi 2 //////////////        eventdg.put("6/3", "شهادت حضرت فاطمه زهرا سلام الله علیها");        ishollyg.put("6/3", true);        eventdg.put("6/20", "ولادت حضرت فاطمه زهرا سلام الله علیها و روز زن");        ishollyg.put("6/20", false);        ///////////// rajab ///////////        eventdg.put("7/1", "ولادت امام محمد باقر علیه السلام");        ishollyg.put("7/1", false);        eventdg.put("7/3", "شهادت امام علی النقی علیه السلام");        ishollyg.put("7/3", false);        eventdg.put("7/10", "ولادت امام علی النقی علیه السلام");        ishollyg.put("7/10", false);        eventdg.put("7/13", "ولادت امام علی علیه السلام");        ishollyg.put("7/13", true);        eventdg.put("7/15", "وفات حضرت زینب سلام الله علیها");        ishollyg.put("7/15", false);        eventdg.put("7/25", "شهادت امام موسی کاظم علیه السلام");        ishollyg.put("7/25", false);        eventdg.put("7/27", "مبعث رسول اکرم");        ishollyg.put("7/27", true);        ////////////// shaban /////////////        eventdg.put("8/3", "ولادت امام حسین علیه السلام");        ishollyg.put("8/3", false);        eventdg.put("8/5", "ولادت امام زین العابدین علیه السلام");        ishollyg.put("8/5", false);        eventdg.put("8/11", "ولادت حضرت علی اکبر و روز جوان");        ishollyg.put("8/11", false);        eventdg.put("8/15", "ولادت امام زمان عجل الله و جشن نیمه شعبان");        ishollyg.put("8/15", true);        ///////////// ramadan ///////////        eventdg.put("9/15", "ولادت امام حسن مجتی علیه السلام");        ishollyg.put("9/15", false);        eventdg.put("9/18", "شب قدر");        ishollyg.put("9/18", false);        eventdg.put("9/19", "ضربت خوردن حضرت علی علیه السلام");        ishollyg.put("9/19", false);        eventdg.put("9/21", "شهادت حضرت علی علیه السلام");        ishollyg.put("9/21", true);        eventdg.put("9/22", "شب قدر");        ishollyg.put("9/22", false);        /////////////// shawwal ///////////        eventdg.put("10/1", "عید سعید فطر");        ishollyg.put("10/1", true);        eventdg.put("10/2", "عید سعید فطر");        ishollyg.put("10/2", true);        eventdg.put("10/25", "شهادت امام جعفر صادق علیه السلام");        ishollyg.put("10/25", true);        ///////////// zel ghade /////////////        eventdg.put("11/1", "ولادت حضرت معصومه سلام الله علیها و روز دختر");        ishollyg.put("11/1", false);        eventdg.put("11/11", "ولادت امام رضا علیه السلام");        ishollyg.put("11/11", false);        eventdg.put("11/30", "شهادت امام محمد تقی علیه السلام");        ishollyg.put("11/30", false);        ///////////////// zel hajje ///////////        eventdg.put("12/7", "شهادت امام محمد باقر علیه السلام");        ishollyg.put("12/7", false);        eventdg.put("12/9", "روز عرفه");        ishollyg.put("12/9", false);        eventdg.put("12/10", "عید سعید قربان");        ishollyg.put("12/10", true);        eventdg.put("12/15", "ولادت امام علی النقی علیه السلام");        ishollyg.put("12/15", false);        eventdg.put("12/18", "عید سعید غدیر خم");        ishollyg.put("12/18", true);    }    int passedg;    public static int ldaym[];    int font = 63;    private void addDays() {        passed = 0;        passedg = 0;        start = (hdayofweek(fyindex + "/" + fmindex + "/" + 1));        fdaym = h2m(1, fmindex, fyindex);        ldaym = h2m(maxDayOfMonth(fmindex, fyindex), fmindex, fyindex);        hdf = HijrahChronology.INSTANCE.date(LocalDate.of(fdaym[2], fdaym[1], fdaym[0]));        hdl = HijrahChronology.INSTANCE.date(LocalDate.of(ldaym[2], ldaym[1], ldaym[0]));        fdayg = hdf.get(java.time.temporal.ChronoField.DAY_OF_MONTH);        DayCard cards[] = new DayCard[maxDayOfMonth(fmindex, fyindex)];        for (StackPane s : stackDays) {            s.getChildren().clear();        }        for (i = 0; i < cards.length; i++) {            StackPane cardPlace = stackDays[i + start];            cards[i] = new DayCard();            cards[i].setFacef(numberFormat.format(i + 1));            cards[i].setId(fyindex + "/" + fmindex + "/" + (i + 1));            if (cardPlace.getHeight() != 0) {                cards[i].updateFont(cardPlace.getHeight() / 2 + 13);            }                        gDaySet(cards);            stackB2F();            mDaySet(cards);            hollyday(cards);            fontAdjust(cards, cardPlace);            clickOnDays(cards);//            System.out.println(cards[i].getFont());            if (i + 1 == getday(today()) && fmindex == getmonth(today()) && fyindex == getyear(today())) {                cards[i].todayh();            }            cardPlace.getChildren().add(cards[i]);        }    }    public void clickOnDays(DayCard[] cards1) {        cards1[i].setOnMouseClicked((e) -> {            for (DayCard card : cards1) {                card.reset();            }            selectDay((DayCard) e.getSource());            tas.setText(note.get(e.getSource().toString()));            if (chk.isSelected()) {                stage2.close();                tf.setText(date);            }            if (e.getClickCount() == 2) {                try {                    Stage stage = new Stage();                    root2 = FXMLLoader.load(Calendar.class.getResource("/PersianCalander/FXML/note.fxml"));                    ta = (TextArea) root2.lookup("#ta");                    save = (Button) root2.lookup("#save");                    Scene scene = new Scene(root2);                    stage.setScene(scene);                    stage.setResizable(false);                    stage.initStyle(StageStyle.TRANSPARENT);                    stage.show();                    ta.setText(note.get(e.getSource().toString()));                    save.setOnAction(s -> {                        note.put(e.getSource().toString(), ta.getText());                        tas.setText(note.get(e.getSource().toString()));                        stage.close();                    });                } catch (IOException ex) {                    Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);                }            }        });    }    public void fontAdjust(DayCard[] cards1, StackPane cardPlace) {        this.heightProperty().addListener((ObservableValue<? extends Number> observable, Number oldValue, Number newValue) -> {            if (oldValue.intValue() != 0) {                for (DayCard card : cards1) {                    card.updateFont(cardPlace.getHeight() / 2 + 13);                }            }        });    }    public void gDaySet(DayCard[] cards1) {        if (i + fdayg <= hdf.lengthOfMonth()) {            cards1[i].setFaceg(numberFormat.format(i + fdayg));            passedg++;            if (ishollyg.get(hdf.get(java.time.temporal.ChronoField.MONTH_OF_YEAR) + "/" + (i + fdayg)) != null                    && ishollyg.get(hdf.get(java.time.temporal.ChronoField.MONTH_OF_YEAR) + "/" + (i + fdayg)) == true) {                cards1[i].holly();            }        } else {            cards1[i].setFaceg(numberFormat.format((i + 1) - passedg));            if (ishollyg.get(hdl.get(java.time.temporal.ChronoField.MONTH_OF_YEAR) + "/" + ((i + 1) - passedg)) != null                    && ishollyg.get(hdl.get(java.time.temporal.ChronoField.MONTH_OF_YEAR) + "/" + ((i + 1) - passedg)) == true) {                cards1[i].holly();            }        }    }    public void stackB2F() {        if (start == 1) {            stackDays[35].toFront();            stackDays[1].toFront();        } else if (start > 1) {            stackDays[35].toFront();            stackDays[36].toFront();        } else {            stackDays[0].toFront();            stackDays[1].toFront();        }    }    public void mDaySet(DayCard[] cards1) {        if (i + fdaym[0] <= maxDayOfMonthm(fdaym[1], myindex)) {            cards1[i].setFacem(i + fdaym[0] + "");            passed++;        } else {            cards1[i].setFacem((i + 1) - passed + "");        }    }    public void hollyday(DayCard[] cards1) {        if (i + start == 6 || i + start == 13 || i + start == 20 || i + start == 27 || i + start == 34) {            cards1[i].holly();        }        if (isholly.get(fmindex + "/" + (i + 1)) != null && isholly.get(fmindex + "/" + (i + 1)) == true) {            cards1[i].holly();        }    }    public void updateUI() {        backGroundSet();        fdaym = h2m(1, fmindex, fyindex);        ldaym = h2m(maxDayOfMonth(fmindex, fyindex), fmindex, fyindex);        hdf = HijrahChronology.INSTANCE.date(LocalDate.of(fdaym[2], fdaym[1], fdaym[0]));        hdl = HijrahChronology.INSTANCE.date(LocalDate.of(ldaym[2], ldaym[1], ldaym[0]));        lblmm.setText(map.get(fmindex + ""));        lblfm.setText(hmonth2str(fmindex));        lblfy.setText(fyindex + "");        lblmy.setText(myindex + "");        lblgy.setText(gyindex + "");        lbleve.setText("");        tas.setText("");        lbltdf.setText("");        lbltdm.setText("");        lbltdg.setText("");        lblgm.setText(gmonth2str(hdf.get(java.time.temporal.ChronoField.MONTH_OF_YEAR)) + " - "                + gmonth2str((hdl.get(java.time.temporal.ChronoField.MONTH_OF_YEAR))));//        System.gc();    }    public void backGroundSet() {        if (fmindex == 1 || fmindex == 2 || fmindex == 3) {            image = Calendar.class.getResource("/PersianCalander/IMAGE/springf.jpg").toExternalForm();            root.setStyle("-fx-background-image: url('" + image + "'); "                    + "-fx-background-position: center center; "                    + "-fx-background-repeat: stretch;");        }        if (fmindex == 4 || fmindex == 5 || fmindex == 6) {            image = Calendar.class.getResource("/PersianCalander/IMAGE/f.jpg").toExternalForm();            root.setStyle("-fx-background-image: url('" + image + "'); "                    + "-fx-background-position: center center; "                    + "-fx-background-repeat: stretch;");        }        if (fmindex == 7 || fmindex == 8 || fmindex == 9) {            image = Calendar.class.getResource("/PersianCalander/IMAGE/fallf.jpg").toExternalForm();            root.setStyle("-fx-background-image: url('" + image + "'); "                    + "-fx-background-position: center center; "                    + "-fx-background-repeat: stretch;");        }        if (fmindex == 10 || fmindex == 11 || fmindex == 12) {            image = Calendar.class.getResource("/PersianCalander/IMAGE/winterf.jpg").toExternalForm();            root.setStyle("-fx-background-image: url('" + image + "'); "                    + "-fx-background-position: center center; "                    + "-fx-background-repeat: stretch;");        }    }    public void selectDay(DayCard card) {//        System.gc();        selected = card;        lbleve.setText("");        getmm = h2m(selected.getFacef(), fmindex, fyindex);        hdd = HijrahChronology.INSTANCE.date(LocalDate.of(getmm[2], getmm[1], getmm[0]));        if (eventdf.get(fmindex + "/" + selected.getFacef()) != null) {            lbleve.setText(lbleve.getText() + eventdf.get(fmindex + "/" + selected.getFacef()) + "\n");        }        if (eventdg.get(hdd.get(java.time.temporal.ChronoField.MONTH_OF_YEAR) + "/" + selected.getFaceg()) != null) {            lbleve.setText(lbleve.getText() + eventdg.get(hdd.get(java.time.temporal.ChronoField.MONTH_OF_YEAR) + "/" + selected.getFaceg()));        }        lblmm.setText(mmonth2str(getmm[1]));        lblmy.setText(getmm[2] + "");        lblgm.setText(gmonth2str(hdd.get(java.time.temporal.ChronoField.MONTH_OF_YEAR)));        lblgy.setText(hdd.get(java.time.temporal.ChronoField.YEAR) + "");        lbltdf.setText(dayFullf(fyindex + "/" + fmindex + "/" + selected.getFacef()));        lbltdm.setText(dayFullm(myindex + "/" + getmm[1] + "/" + selected.getFacem()));        lbltdg.setText(dayFullg(hdd.get(java.time.temporal.ChronoField.YEAR) + "/"                + hdd.get(java.time.temporal.ChronoField.MONTH_OF_YEAR) + "/"                + hdd.get(java.time.temporal.ChronoField.DAY_OF_MONTH)));        date = fyindex + "/" + fmindex + "/" + selected.getFacef();        selected.hilight();    }}